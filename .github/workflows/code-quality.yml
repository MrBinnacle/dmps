name: Code Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install analysis tools
      run: |
        pip install flake8 pylint mypy black isort
        pip install -e .
    
    - name: Code formatting check
      run: |
        black --check --diff src/
        isort --check-only --diff src/
    
    - name: Linting with flake8
      run: |
        flake8 src/ --max-line-length=88 --max-complexity=10 --statistics
    
    - name: Advanced linting with pylint
      run: |
        pylint src/dmps/ --disable=C0114,C0115,C0116 --max-line-length=88
    
    - name: Type checking
      run: |
        mypy src/dmps/ --ignore-missing-imports
    
    - name: Naming convention check
      run: |
        python -c "
        import ast
        import sys
        from pathlib import Path
        
        def check_naming(file_path):
            with open(file_path) as f:
                tree = ast.parse(f.read())
            
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    if not node.name.islower() or '__' in node.name[1:-1]:
                        if not node.name.startswith('_'):
                            print(f'Function naming issue: {node.name} in {file_path}')
                elif isinstance(node, ast.ClassDef):
                    if not node.name[0].isupper():
                        print(f'Class naming issue: {node.name} in {file_path}')
        
        for py_file in Path('src').rglob('*.py'):
            check_naming(py_file)
        "